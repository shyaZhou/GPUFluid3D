
#version 450

layout (local_size_x = 8, local_size_y = 8,local_size_z = 8) in;

uniform vec4 Size;

// Binding 1 : 
layout( binding = 1) buffer _Write 
{
   vec3 Write[];
};

// Binding 2 : 
layout( binding = 2) buffer _Velocity 
{
   vec3 Velocity[];
};

// Binding 3 : 
layout( binding = 3) buffer _Obstacles 
{
   float Obstacles[];
};






void main ()
{

    uvec3 id = gl_GlobalInvocationID;
    int idxL = int(max(0, id.x-1) + id.y * Size.x + id.z * Size.x * Size.y);
    int idxR = int(min(Size.x-1, id.x+1) + id.y*Size.x + id.z * Size.x * Size.y);
    
    int idxB = int(id.x + max(0, id.y-1) * Size.x + id.z * Size.x * Size.y);
    int idxT = int(id.x + min(Size.y-1, id.y+1) * Size.x + id.z*Size.x * Size.y);
    
    int idxD = int(id.x + id.y * Size.x + max(0, id.z-1) * Size.x * Size.y);
    int idxU = int(id.x + id.y * Size.x + min(Size.z-1, id.z+1) * Size.x * Size.y);
    
	vec3 L = Velocity[ idxL ];
    vec3 R = Velocity[ idxR ];
    
    vec3 B = Velocity[ idxB ];
    vec3 T = Velocity[ idxT ];
    
    vec3 D = Velocity[ idxD ];
    vec3 U = Velocity[ idxU ];
    
    vec3 obstacleVelocity = vec3(0,0,0);
    
    if(Obstacles[idxL] > 0.1) L = obstacleVelocity;
    if(Obstacles[idxR] > 0.1) R = obstacleVelocity;
    
    if(Obstacles[idxB] > 0.1) B = obstacleVelocity;
    if(Obstacles[idxT] > 0.1) T = obstacleVelocity;
    
    if(Obstacles[idxD] > 0.1) D = obstacleVelocity;
    if(Obstacles[idxU] > 0.1) U = obstacleVelocity;
    
    float divergence =  0.5 * ( ( R.x - L.x ) + ( T.y - B.y ) + ( U.z - D.z ) );
    
    int idx = int(id.x + id.y * Size.x + id.z * Size.x * Size.y);
    
    Write[idx] = vec3(divergence,0,0);
}
